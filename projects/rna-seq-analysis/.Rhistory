y = 'padj',
title = 'RmpA Overexpression vs Control',
pCutoff = 0.05,
FCcutoff = 1,
pointSize = 3.0,
labSize = 4.0)
# Save the plot
ggsave("figures/volcano_plot.pdf", width = 12, height = 8)
EnhancedVolcano(res_df,
lab = res_df$gene_id,
x = 'log2FoldChange',
y = 'padj',
title = 'RmpA Overexpression vs Control',
pCutoff = 0.05,
FCcutoff = 1,
pointSize = 3.0,
labSize = 4.0)
# Save the plot
ggsave("figures/volcano_plot.pdf", width = 12, height = 8)
View(top_up)
View(top_down)
View(sig_genes)
# Load required libraries
library(DESeq2)
library(tidyverse)
library(pheatmap)
library(ggplot2)
library(EnhancedVolcano)
library(pathview)
# Set working directory
setwd("/media/vicky/OS/Users/kakar/bioinformatics-portfolio/projects/rna-seq-analysis")
# Load preprocessed data
dds_filtered <- readRDS("data/processed/dds_filtered_object.rds")
normalized_counts <- readRDS("data/processed/normalized_counts.rds")
## Differential Expression Analysis
# Run DESeq analysis
dds_filtered <- DESeq(dds_filtered)
# Get results, comparing rmpA_overexpression vs control
res <- results(dds_filtered,
contrast=c("condition", "rmpA_overexpression", "control"),
alpha=0.05)  # FDR threshold of 5%
# Look at summary of differential expression
summary(res)
# Convert DESeq2 results to a data frame and add gene names
res_df <- as.data.frame(res)
res_df$gene_id <- rownames(res_df)
## Results Visualization
EnhancedVolcano(res_df,
lab = res_df$gene_id,
x = 'log2FoldChange',
y = 'padj',
title = 'RmpA Overexpression vs Control',
pCutoff = 0.05,
FCcutoff = 1,
pointSize = 3.0,
labSize = 4.0)
# Save the plot
ggsave("figures/volcano_plot.pdf", width = 12, height = 8)
##Analyse the most significantly expressed genes:
# Filter significant genes and sort by fold change
sig_genes <- res_df[which(res_df$padj < 0.05 & abs(res_df$log2FoldChange) > 1),]
sig_genes <- sig_genes[order(abs(sig_genes$log2FoldChange), decreasing=TRUE),]
# Look at top 10 up and down regulated genes
top_up <- head(sig_genes[sig_genes$log2FoldChange > 0,], 10)
top_down <- head(sig_genes[sig_genes$log2FoldChange < 0,], 10)
# Print results
print("Top 10 Upregulated Genes:")
print(top_up[, c("gene_id", "log2FoldChange", "padj")])
print("Top 10 Downregulated Genes:")
print(top_down[, c("gene_id", "log2FoldChange", "padj")])
# Get normalized counts for these genes with gene names
top_20_genes <- rbind(top_up, top_down)
heat_counts <- normalized_counts[rownames(normalized_counts) %in% rownames(top_20_genes),]
# Create heatmap of top genes
pheatmap(heat_counts,
scale = "row",
show_rownames = TRUE,
cluster_cols = TRUE,
main = "Top 20 Differentially Expressed Genes",
annotation_col = data.frame(
Condition = factor(c(rep("Control", 3), rep("RmpA", 3))),
row.names = colnames(heat_counts)
))
## Pathway analysis
# Prepare data for pathway visualization
gene_fc <- res$log2FoldChange
names(gene_fc) <- sub("b", "", rownames(res)) # The letter 'b' is removed for pathview to recognize the gene names.
# Create pathway view
pathview(gene.data = gene_fc,
pathway.id = "eco00630",
species = "eco",
limit = list(gene = 3, cpd = 1),
low = "blue",
mid = "white",
high = "red",
gene.idtype = "KEGG")
# Load required libraries
library(DESeq2)
library(tidyverse)
library(pheatmap)
library(ggplot2)
library(EnhancedVolcano)
library(pathview)
# Set working directory
setwd("/media/vicky/OS/Users/kakar/bioinformatics-portfolio/projects/rna-seq-analysis")
# Load preprocessed data
dds_filtered <- readRDS("data/processed/dds_filtered_object.rds")
normalized_counts <- readRDS("data/processed/normalized_counts.rds")
## Differential Expression Analysis
# Run DESeq analysis
dds_filtered <- DESeq(dds_filtered)
# Get results, comparing rmpA_overexpression vs control
res <- results(dds_filtered,
contrast=c("condition", "rmpA_overexpression", "control"),
alpha=0.05)  # FDR threshold of 5%
# Look at summary of differential expression
summary(res)
# Convert DESeq2 results to a data frame and add gene names
res_df <- as.data.frame(res)
res_df$gene_id <- rownames(res_df)
## Results Visualization
EnhancedVolcano(res_df,
lab = res_df$gene_id,
x = 'log2FoldChange',
y = 'padj',
title = 'RmpA Overexpression vs Control',
pCutoff = 0.05,
FCcutoff = 1,
pointSize = 3.0,
labSize = 4.0)
# Save the plot
ggsave("figures/volcano_plot.pdf", width = 12, height = 8)
##Analyse the most significantly expressed genes:
# Filter significant genes and sort by fold change
sig_genes <- res_df[which(res_df$padj < 0.05 & abs(res_df$log2FoldChange) > 1),]
sig_genes <- sig_genes[order(abs(sig_genes$log2FoldChange), decreasing=TRUE),]
# Look at top 10 up and down regulated genes
top_up <- head(sig_genes[sig_genes$log2FoldChange > 0,], 10)
top_down <- head(sig_genes[sig_genes$log2FoldChange < 0,], 10)
# Print results
print("Top 10 Upregulated Genes:")
print(top_up[, c("gene_id", "log2FoldChange", "padj")])
print("Top 10 Downregulated Genes:")
print(top_down[, c("gene_id", "log2FoldChange", "padj")])
# Get normalized counts for these genes with gene names
top_20_genes <- rbind(top_up, top_down)
heat_counts <- normalized_counts[rownames(normalized_counts) %in% rownames(top_20_genes),]
# Create heatmap of top genes
pheatmap(heat_counts,
scale = "row",
show_rownames = TRUE,
cluster_cols = TRUE,
main = "Top 20 Differentially Expressed Genes",
annotation_col = data.frame(
Condition = factor(c(rep("Control", 3), rep("RmpA", 3))),
row.names = colnames(heat_counts)
))
## Pathway analysis
# Prepare data for pathway visualization
gene_fc <- res$log2FoldChange
names(gene_fc) <- sub("b", "", rownames(res)) # The letter 'b' is removed for pathview to recognize the gene names.
# Create pathway view
pathview(gene.data = gene_fc,
pathway.id = "eco00630",
species = "eco",
limit = list(gene = 3, cpd = 1),
low = "blue",
mid = "white",
high = "red",
gene.idtype = "KEGG")
# Load required libraries
library(DESeq2)
library(tidyverse)
library(pheatmap)
library(ggplot2)
library(EnhancedVolcano)
library(pathview)
# Set working directory
setwd("/media/vicky/OS/Users/kakar/bioinformatics-portfolio/projects/rna-seq-analysis")
# Load preprocessed data
dds_filtered <- readRDS("data/processed/dds_filtered_object.rds")
normalized_counts <- readRDS("data/processed/normalized_counts.rds")
# Run DESeq analysis
dds_filtered <- DESeq(dds_filtered)
# Get results, comparing rmpA_overexpression vs control
res <- results(dds_filtered,
contrast=c("condition", "rmpA_overexpression", "control"),
alpha=0.05)  # FDR threshold of 5%
# Look at summary of differential expression
summary(res)
# Convert DESeq2 results to a data frame and add gene names
res_df <- as.data.frame(res)
res_df$gene_id <- rownames(res_df)
EnhancedVolcano(res_df,
lab = res_df$gene_id,
x = 'log2FoldChange',
y = 'padj',
title = 'RmpA Overexpression vs Control',
pCutoff = 0.05,
FCcutoff = 1,
pointSize = 3.0,
labSize = 4.0)
# Save the plot
ggsave("figures/volcano_plot.pdf", width = 12, height = 8)
##Analyse the most significantly expressed genes:
# Filter significant genes and sort by fold change
sig_genes <- res_df[which(res_df$padj < 0.05 & abs(res_df$log2FoldChange) > 1),]
sig_genes <- sig_genes[order(abs(sig_genes$log2FoldChange), decreasing=TRUE),]
# Look at top 10 up and down regulated genes
top_up <- head(sig_genes[sig_genes$log2FoldChange > 0,], 10)
top_down <- head(sig_genes[sig_genes$log2FoldChange < 0,], 10)
# Print results
print("Top 10 Upregulated Genes:")
print(top_up[, c("gene_id", "log2FoldChange", "padj")])
print("Top 10 Downregulated Genes:")
print(top_down[, c("gene_id", "log2FoldChange", "padj")])
# Get normalized counts for these genes with gene names
top_20_genes <- rbind(top_up, top_down)
heat_counts <- normalized_counts[rownames(normalized_counts) %in% rownames(top_20_genes),]
# Create heatmap of top genes
pheatmap(heat_counts,
scale = "row",
show_rownames = TRUE,
cluster_cols = TRUE,
main = "Top 20 Differentially Expressed Genes",
annotation_col = data.frame(
Condition = factor(c(rep("Control", 3), rep("RmpA", 3))),
row.names = colnames(heat_counts)
))
# Prepare data for pathway visualization
gene_fc <- res$log2FoldChange
names(gene_fc) <- sub("b", "", rownames(res)) # The letter 'b' is removed for pathview to recognize the gene names.
# Create pathway view
pathview(gene.data = gene_fc,
pathway.id = "eco00630",
species = "eco",
limit = list(gene = 3, cpd = 1),
low = "blue",
mid = "white",
high = "red",
gene.idtype = "KEGG")
# Load required libraries
library(DESeq2)
library(tidyverse)
library(pheatmap)
library(ggplot2)
library(EnhancedVolcano)
library(pathview)
# Set working directory
setwd("/media/vicky/OS/Users/kakar/bioinformatics-portfolio/projects/rna-seq-analysis")
# Load preprocessed data
dds_filtered <- readRDS("data/processed/dds_filtered_object.rds")
normalized_counts <- readRDS("data/processed/normalized_counts.rds")
# Prepare data for pathway visualization
gene_fc <- res$log2FoldChange
names(gene_fc) <- sub("b", "", rownames(res)) # The letter 'b' is removed for pathview to recognize the gene names.
# Create pathway view
pathview(gene.data = gene_fc,
pathway.id = "eco00630",
species = "eco",
limit = list(gene = 3, cpd = 1),
low = "blue",
mid = "white",
high = "red",
gene.idtype = "KEGG")
# Load required libraries
library(DESeq2)
library(tidyverse)
library(pheatmap)
library(ggplot2)
library(EnhancedVolcano)
library(pathview)
# Set working directory
setwd("/media/vicky/OS/Users/kakar/bioinformatics-portfolio/projects/rna-seq-analysis")
# Load preprocessed data
dds_filtered <- readRDS("data/processed/dds_filtered_object.rds")
normalized_counts <- readRDS("data/processed/normalized_counts.rds")
# Load required libraries
library(DESeq2)
library(tidyverse)
library(pheatmap)
library(EnhancedVolcano)
library(pathview)
# Set working directory
setwd("/media/vicky/OS/Users/kakar/bioinformatics-portfolio/projects/rna-seq-analysis")
# Load preprocessed data
dds_filtered <- readRDS("data/processed/dds_filtered_object.rds")
normalized_counts <- readRDS("data/processed/normalized_counts.rds")
# Run DESeq analysis
dds_filtered <- DESeq(dds_filtered)
# Get results
res <- results(dds_filtered,
contrast=c("condition", "rmpA_overexpression", "control"),
alpha=0.05)
# Summary of results
summary(res)
# Create results dataframe
res_df <- as.data.frame(res)
res_df$gene_id <- rownames(res_df)
# Create volcano plot
EnhancedVolcano(res_df,
lab = res_df$gene_id,
x = 'log2FoldChange',
y = 'padj',
title = 'RmpA Overexpression vs Control',
pCutoff = 0.05,
FCcutoff = 1,
pointSize = 3.0,
labSize = 4.0)
# Get top DE genes
sig_genes <- res_df[which(res_df$padj < 0.05 & abs(res_df$log2FoldChange) > 1),]
top_up <- head(sig_genes[order(-sig_genes$log2FoldChange),], 10)
top_down <- head(sig_genes[order(sig_genes$log2FoldChange),], 10)
# Create heatmap of top genes
top_20_genes <- rbind(top_up, top_down)
heat_counts <- normalized_counts[rownames(normalized_counts) %in% rownames(top_20_genes),]
pheatmap(heat_counts,
scale = "row",
show_rownames = TRUE,
cluster_cols = TRUE,
main = "Top 20 Differentially Expressed Genes",
annotation_col = data.frame(
Condition = factor(c(rep("Control", 3), rep("RmpA", 3))),
row.names = colnames(heat_counts)
))
# Prepare data for pathway visualization
gene_fc <- res$log2FoldChange
names(gene_fc) <- sub("b", "", rownames(res))
# Create pathway view
pathview(gene.data = gene_fc,
pathway.id = "eco00630",
species = "eco",
limit = list(gene = 3, cpd = 1),
low = "blue",
mid = "white",
high = "red",
gene.idtype = "KEGG")
# Display the pathway image
knitr::include_graphics("eco00630.pathview.png")
# Prepare data for pathway visualization
gene_fc <- res$log2FoldChange
# Instead of just removing 'b', we need to map to proper KEGG IDs
names(gene_fc) <- paste0("eco:", sub("b", "", rownames(res)))
# Create pathway view with updated IDs
pathview(gene.data = gene_fc,
pathway.id = "eco00630",
species = "eco",
limit = list(gene = 3, cpd = 1),
low = "blue",
mid = "white",
high = "red",
gene.idtype = "KEGG")
# Display the pathway image
knitr::include_graphics("eco00630.png")
library(org.EcK12.eg.db)
# First, let's properly map our genes to KEGG IDs
gene_fc <- res$log2FoldChange
# Clean gene names (remove 'b' prefix)
clean_genes <- sub("b", "", rownames(res))
# Convert to KEGG IDs
kegg_ids <- mapIds(org.EcK12.eg.db,
keys = clean_genes,
column = "PATH",
keytype = "ENTREZID",
multiVals = "first")
library(org.EcK12.eg.db)
# Check available key types
keys <- keytypes(org.EcK12.eg.db)
print(keys)
# Let's also look at what some actual keys look like
head(keys(org.EcK12.eg.db, keytype="ENTREZID"))
View(top_up)
View(top_down_info)
# Let's look at our data first
head(clean_genes)
# Try using the genes directly in pathview
pathview(gene.data = gene_fc,
pathway.id = "eco00630",
species = "eco",
limit = list(gene = 3, cpd = 1),
low = "blue",
mid = "white",
high = "red",
gene.idtype = "ENTREZ")
# Let's look at our data first
# Install required package if not already installed
if (!require("KEGGREST")) {
BiocManager::install("KEGGREST")
}
library(KEGGREST)
# Get E. coli KEGG pathway info
eco_genes <- keggList("eco")
# Let's look at what KEGG IDs look like
head(names(eco_genes))
# Try to create pathway with KEGG format
gene_fc <- res$log2FoldChange
names(gene_fc) <- paste0("eco:", clean_genes)
# Create pathway view
pathview(gene.data = gene_fc,
pathway.id = "eco00630",
species = "eco",
limit = list(gene = 3, cpd = 1),
low = "blue",
mid = "white",
high = "red",
gene.idtype = "KEGG")
# Display the pathway image
knitr::include_graphics("eco00630.png")
# Let's look at our data first
# Install required package if not already installed
# Get E. coli KEGG pathway info
eco_genes <- keggList("eco")
# Modify our gene IDs to match KEGG format
gene_fc <- res$log2FoldChange
names(gene_fc) <- paste0("eco:b", clean_genes)  # Note the 'b' after 'eco:'
# Create pathway view
pathview(gene.data = gene_fc,
pathway.id = "eco00630",
species = "eco",
limit = list(gene = 3, cpd = 1),
low = "blue",
mid = "white",
high = "red",
gene.idtype = "KEGG")
# Display the pathway image
knitr::include_graphics("eco00630.png")
# Look at our gene IDs
print("Current gene IDs:")
head(clean_genes)
# Look at actual KEGG IDs for E. coli in this pathway
eco_path <- keggGet("eco00630")
print("KEGG pathway genes:")
head(eco_path[[1]]$GENE)
# Display the pathway image
knitr::include_graphics("eco00630.png")
# Look at our gene IDs
print("Current gene IDs:")
head(clean_genes)
# Look at actual KEGG IDs for E. coli in this pathway
eco_path <- keggGet("eco00630")
print("KEGG pathway genes:")
head(eco_path[[1]]$GENE)
# Format gene IDs correctly
gene_fc <- res$log2FoldChange
# Make sure numbers are padded to 4 digits with leading zeros
clean_genes_padded <- sprintf("%04d", as.numeric(clean_genes))
names(gene_fc) <- paste0("eco:b", clean_genes_padded)
# Create pathway view with modified IDs
pathview(gene.data = gene_fc,
pathway.id = "eco00630",
species = "eco",
limit = list(gene = 3, cpd = 1),
low = "blue",
mid = "white",
high = "red",
gene.idtype = "KEGG")
# Display the pathway image
knitr::include_graphics("eco00630.png")
# First, let's extract the gene IDs from the pathway
pathway_genes <- eco_path[[1]]$GENE
print("First few pathway genes:")
head(pathway_genes)
# Create mapping between our IDs and KEGG IDs
# Using enzyme/gene names instead of b numbers
gene_fc <- res$log2FoldChange
names(gene_fc) <- paste0("b", clean_genes)
# Try pathway view with different settings
pathview(gene.data = gene_fc,
pathway.id = "eco00630",
species = "eco",
limit = list(gene = 3, cpd = 1),
low = "blue",
mid = "white",
high = "red",
gene.idtype = "ENTREZ")  # Try using ENTREZ instead of KEGG
# Use b-numbers directly
gene_fc <- res$log2FoldChange
# Remove the 'b' prefix if present and keep just numbers
clean_genes_simple <- gsub("b", "", rownames(res))
names(gene_fc) <- clean_genes_simple
pathview(gene.data = gene_fc,
pathway.id = "eco00630",
species = "eco",
limit = list(gene = 3, cpd = 1),
low = "blue",
mid = "white",
high = "red",
gene.idtype = "NCBI-GeneID")
# Get gene names from our ttdA/ttdB genes that we know are in the pathway
ttd_genes <- res_df[c("b3061", "b3062"), ]
print("Our tartrate genes:")
print(ttd_genes)
# Just try with these genes we know should be in the pathway
gene_fc_test <- res$log2FoldChange[c("b3061", "b3062")]
names(gene_fc_test) <- c("ttdA", "ttdB")  # Try using gene names instead of IDs
# Create pathway view with just these test genes
pathview(gene.data = gene_fc_test,
pathway.id = "eco00630",
species = "eco",
limit = list(gene = 3, cpd = 1),
low = "blue",
mid = "white",
high = "red",
gene.idtype = "SYMBOL")
# Display the pathway image
knitr::include_graphics("eco00630.png")
names(gene_fc) <- paste0("b", names(gene_fc))  # Add "b" prefix if missing
gene.idtype = "locus"  # Use locus tag instead of KEGG
library(KEGGREST)
keggGet("eco00630")
pathway_genes <- keggLink("pathway", "eco")["path:eco00630"]
print(pathway_genes)  # Shows all genes in this pathway
